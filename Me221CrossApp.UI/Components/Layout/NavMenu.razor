@inject ICustomViewService CustomViewService
@using ME221CrossApp.UI.Services
@implements IAsyncDisposable

<nav class="nav-container">
    <NavLink class="nav-item" href="" Match="NavLinkMatch.All">
        <TablerIcon OutlineIcon="TablerIconOutlineName.Home" Size="28px" />
        <span class="nav-text">Home</span>
    </NavLink>
    <NavLink class="nav-item" href="tables">
        <TablerIcon OutlineIcon="TablerIconOutlineName.Table" Size="28px" />
        <span class="nav-text">Tables</span>
    </NavLink>
    <NavLink class="nav-item" href="drivers">
        <TablerIcon OutlineIcon="TablerIconOutlineName.SteeringWheel" Size="28px" />
        <span class="nav-text">Drivers</span>
    </NavLink>
    
    @foreach (var view in _customViews.OrderBy(v => v.Name))
    {
        <NavLink class="nav-item" href="@($"view/{view.Id}")">
            <TablerIcon OutlineIcon="@GetIcon(view.IconName)" Size="28px" />
            <span class="nav-text">@view.Name</span>
        </NavLink>
    }
    
    <NavLink class="nav-item" href="settings">
        <TablerIcon OutlineIcon="TablerIconOutlineName.Settings" Size="28px" />
        <span class="nav-text">Settings</span>
    </NavLink>
</nav>

@code {
    [Parameter]
    public required bool IsMobile { get; set; }

    private IReadOnlyList<CustomViewDefinition> _customViews = [];

    protected override async Task OnInitializedAsync()
    {
        CustomViewService.OnCustomViewsChanged += HandleCustomViewsChanged;
        _customViews = await CustomViewService.GetCustomViewsAsync();
    }

    private void HandleCustomViewsChanged()
    {
        _ = InvokeAsync(async () =>
        {
            _customViews = await CustomViewService.GetCustomViewsAsync();
            StateHasChanged();
        });
    }

    private TablerIconOutlineName GetIcon(string iconName)
    {
        return Enum.TryParse<TablerIconOutlineName>(iconName, true, out var icon) ? icon : TablerIconOutlineName.QuestionMark;
    }

    public ValueTask DisposeAsync()
    {
        CustomViewService.OnCustomViewsChanged -= HandleCustomViewsChanged;
        return ValueTask.CompletedTask;
    }
}

<style>
    .nav-container {
        display: flex;
        height: 100%;
    }

    .nav-item {
        display: flex;
        align-items: center;
        text-decoration: none;
        color: var(--text-color-secondary);
        transition: color 0.2s, background-color 0.2s;
        border-radius: var(--radius-md);
    }

    .nav-item:hover {
        color: var(--text-color-headings);
        background-color: var(--app-bg-hover-color);
    }

    .nav-item.active {
        color: var(--primary-color);
    }
    
    .nav-text {
        font-weight: 500;
        font-size: 0.9rem;
    }

    /* Mobile Styles */
    @@media (max-width: 767px) {
        .nav-container {
            justify-content: space-around;
            align-items: center;
            width: 100%;
        }
        .nav-item {
            flex-direction: column;
            gap: 2px;
            padding: var(--spacing-xs);
        }
        .nav-text {
            font-size: 0.7rem;
        }
    }

    /* Desktop Styles */
    @@media (min-width: 768px) {
        .nav-container {
            flex-direction: column;
            gap: 1rem;
            align-items: center;
        }
        .nav-item {
            flex-direction: column;
            gap: 4px;
            padding: var(--spacing-sm);
            width: 60px;
        }
        .nav-text {
            display: none;
        }
    }
</style>
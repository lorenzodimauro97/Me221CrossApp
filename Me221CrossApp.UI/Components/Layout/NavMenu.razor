@inject ICustomViewService CustomViewService
@using ME221CrossApp.UI.Services
@implements IAsyncDisposable

<nav style="@NavContainerStyle">
    <NavLink class="nav-item" href="" Match="NavLinkMatch.All">
        <TablerIcon OutlineIcon="TablerIconOutlineName.Home" Size="40px" />
        @if (IsMobile)
        {
            <span>Home</span>
        }
    </NavLink>
    <NavLink class="nav-item" href="tables">
        <TablerIcon OutlineIcon="TablerIconOutlineName.Table" Size="40px" />
        @if (IsMobile)
        {
            <span>Tables</span>
        }
    </NavLink>
    <NavLink class="nav-item" href="drivers">
        <TablerIcon OutlineIcon="TablerIconOutlineName.SteeringWheel" Size="40px" />
        @if (IsMobile)
        {
            <span>Drivers</span>
        }
    </NavLink>
    
    @foreach (var view in _customViews.OrderBy(v => v.Name))
    {
        <NavLink class="nav-item" href="@($"view/{view.Id}")">
            <TablerIcon OutlineIcon="@GetIcon(view.IconName)" Size="40px" />
            @if (IsMobile)
            {
                <span>@view.Name</span>
            }
        </NavLink>
    }
    
    <NavLink class="nav-item" href="settings">
        <TablerIcon OutlineIcon="TablerIconOutlineName.Settings" Size="40px" />
        @if (IsMobile)
        {
            <span>Settings</span>
        }
    </NavLink>
</nav>

@code {
    [Parameter]
    public required bool IsMobile { get; set; }

    private IReadOnlyList<CustomViewDefinition> _customViews = [];

    protected override async Task OnInitializedAsync()
    {
        CustomViewService.OnCustomViewsChanged += HandleCustomViewsChanged;
        _customViews = await CustomViewService.GetCustomViewsAsync();
    }

    private void HandleCustomViewsChanged()
    {
        _ = InvokeAsync(async () =>
        {
            _customViews = await CustomViewService.GetCustomViewsAsync();
            StateHasChanged();
        });
    }

    private TablerIconOutlineName GetIcon(string iconName)
    {
        return Enum.TryParse<TablerIconOutlineName>(iconName, true, out var icon) ? icon : TablerIconOutlineName.QuestionMark;
    }

    private string NavContainerStyle => IsMobile
        ? "display: flex; justify-content: space-around; align-items: center; width: 100%; padding: 0.5rem 0;"
        : "display: flex; flex-direction: column; gap: 1.5rem;";

    public ValueTask DisposeAsync()
    {
        CustomViewService.OnCustomViewsChanged -= HandleCustomViewsChanged;
        return ValueTask.CompletedTask;
    }
}

<style>
    .nav-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 4px;
        text-decoration: none;
    }

    .nav-item.active {
        color: #ffffff;
    }
</style>
@using System.Globalization

<div class="table-3d-controls">
    <div class="control-group">
        <label>View Mode:</label>
        <div class="button-group">
            <button class="ui-button-secondary @(_currentView == ViewMode.Table ? "active" : "")" @onclick="() => SetView(ViewMode.Table)">Table</button>
            <button class="ui-button-secondary @(_currentView == ViewMode.Plot ? "active" : "")" @onclick="() => SetView(ViewMode.Plot)">3D Plot</button>
        </div>
    </div>
</div>

@if (_currentView == ViewMode.Table)
{
    <div class="table-3d-container">
        <div class="table-3d-scene">
            <table class="table-3d">
                <thead>
                    <tr>
                        <th></th>
                        @foreach (var x in Table.XAxis)
                        {
                            <th>@x.ToString("F0")</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (var i = 0; i < Table.Rows; i++)
                    {
                        var rowIndex = i;
                        <tr>
                            <th>@Table.YAxis[rowIndex].ToString("F0")</th>
                            @for (var j = 0; j < Table.Cols; j++)
                            {
                                var colIndex = j;
                                var index = rowIndex * Table.Cols + colIndex;
                                var val = Table.Output[index];
                                <td style="background-color: @ColorHelper.GetColorForValue(val, _min, _max)">
                                    <input type="number"
                                           step="any"
                                           class="table-input"
                                           value="@val.ToString("F1", CultureInfo.InvariantCulture)"
                                           @onchange="(e) => OnValueChanged(index, e.Value)" />
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}
else
{
    <div class="table-3d-container">
        <SurfacePlot3D Table="Table" />
    </div>
}

@code {
    private enum ViewMode { Table, Plot }
    private ViewMode _currentView = ViewMode.Table;
    
    private float _min, _max;

    [Parameter, EditorRequired]
    public TableData Table { get; set; } = null!;

    [Parameter]
    public EventCallback<TableData> TableChanged { get; set; }

    protected override void OnParametersSet()
    {
        if (Table.Output.Any())
        {
            _min = Table.Output.Min();
            _max = Table.Output.Max();
        }
    }
    
    private Task OnValueChanged(int index, object? value)
    {
        if (float.TryParse(value?.ToString(), NumberStyles.Any, CultureInfo.InvariantCulture, out var floatValue))
        {
            var newOutput = Table.Output.ToList();
            newOutput[index] = floatValue;
            return TableChanged.InvokeAsync(Table with { Output = newOutput });
        }
        return Task.CompletedTask;
    }

    private void SetView(ViewMode view)
    {
        if (_currentView == view) return;
        _currentView = view;
    }
}
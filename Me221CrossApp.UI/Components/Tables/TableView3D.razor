@using System.Globalization

<div class="table-3d-controls">
    <div class="control-group">
        <label>X-Axis Rotation: @_rotationX°</label>
        <input type="range" min="-90" max="90" class="ui-slider" @bind="_rotationX" @bind:event="oninput" />
    </div>
    <div class="control-group">
        <label>Z-Axis Rotation: @_rotationZ°</label>
        <input type="range" min="-90" max="90" class="ui-slider" @bind="_rotationZ" @bind:event="oninput" />
    </div>
</div>

<div class="table-3d-container">
    <div class="table-3d-scene" style="@TransformStyle">
        <table class="table-3d">
            <thead>
                <tr>
                    <th></th>
                    @foreach (var x in Table.XAxis)
                    {
                        <th>@x.ToString("F0")</th>
                    }
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < Table.Rows; i++)
                {
                    var rowIndex = i;
                    <tr>
                        <th>@Table.YAxis[rowIndex].ToString("F0")</th>
                        @for (var j = 0; j < Table.Cols; j++)
                        {
                            var colIndex = j;
                            var index = rowIndex * Table.Cols + colIndex;
                            var val = Table.Output[index];
                            <td style="background-color: @ColorHelper.GetColorForValue(val, _min, _max)">
                                <input type="number"
                                       step="any"
                                       class="table-input"
                                       value="@val.ToString("F1", CultureInfo.InvariantCulture)"
                                       @onchange="(e) => OnValueChanged(index, e.Value)" />
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private int _rotationX = 0;
    private int _rotationZ = 0;
    private string TransformStyle => $"transform: rotateX({_rotationX}deg) rotateZ({_rotationZ}deg);";
    private float _min, _max;

    [Parameter, EditorRequired]
    public TableData Table { get; set; } = null!;

    [Parameter]
    public EventCallback<TableData> TableChanged { get; set; }

    protected override void OnParametersSet()
    {
        if (Table.Output.Any())
        {
            _min = Table.Output.Min();
            _max = Table.Output.Max();
        }
    }
    
    private Task OnValueChanged(int index, object? value)
    {
        if (float.TryParse(value?.ToString(), NumberStyles.Any, CultureInfo.InvariantCulture, out var floatValue))
        {
            var newOutput = Table.Output.ToList();
            newOutput[index] = floatValue;
            return TableChanged.InvokeAsync(Table with { Output = newOutput });
        }
        return Task.CompletedTask;
    }
}
@using System.Globalization

<div class="table-responsive">
    <table class="table table-bordered table-striped table-sm text-center">
        <thead>
        <tr>
            @foreach (var x in Table.XAxis)
            {
                <th>@x.ToString("F1")</th>
            }
        </tr>
        </thead>
        <tbody>
        <tr>
            @for (var i = 0; i < Table.Output.Count; i++)
            {
                var index = i;
                <td style="background-color: @ColorHelper.GetColorForValue(Table.Output[index], _min, _max)">
                    <input type="number"
                           step="any"
                           class="table-input"
                           value="@Table.Output[index].ToString("F2", CultureInfo.InvariantCulture)"
                           @onchange="(e) => OnValueChanged(index, e.Value)" />
                </td>
            }
        </tr>
        </tbody>
    </table>
</div>

@code {
    [Parameter, EditorRequired]
    public TableData Table { get; set; } = null!;

    [Parameter]
    public EventCallback<TableData> TableChanged { get; set; }

    private float _min, _max;

    protected override void OnParametersSet()
    {
        if (Table.Output.Any())
        {
            _min = Table.Output.Min();
            _max = Table.Output.Max();
        }
    }

    private Task OnValueChanged(int index, object? value)
    {
        if (float.TryParse(value?.ToString(), NumberStyles.Any, CultureInfo.InvariantCulture, out var floatValue))
        {
            var newOutput = Table.Output.ToList();
            newOutput[index] = floatValue;
            return TableChanged.InvokeAsync(Table with { Output = newOutput });
        }
        return Task.CompletedTask;
    }
}
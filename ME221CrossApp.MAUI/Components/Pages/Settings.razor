@page "/settings"
@inject IEcuDefinitionService EcuDefinitionService
@inject IFilePicker FilePicker
@inject IJSRuntime JSRuntime

<PageTitle>Settings</PageTitle>

<h1>ECU Definition Settings</h1>

<p>Import an ECU definition XML file to populate the application with tables, drivers, and data links.</p>

<button class="btn btn-primary" @onclick="ImportDefinitionsAsync" disabled="@_isImporting">
    @if (_isImporting)
    {
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        <span>Importing...</span>
    }
    else
    {
        <span>Import and Merge Definitions</span>
    }
</button>

@if (!string.IsNullOrEmpty(_statusMessage))
{
    <div class="alert @(_isError ? "alert-danger" : "alert-success") mt-3" role="alert">
        @_statusMessage
    </div>
}

@code {
    private bool _isImporting;
    private string? _statusMessage;
    private bool _isError;

    private async Task ImportDefinitionsAsync()
    {
        _isImporting = true;
        _statusMessage = null;
        _isError = false;
        StateHasChanged();

        try
        {
            var result = await FilePicker.PickAsync(new PickOptions
            {
                PickerTitle = "Select an ECU Definition XML file",
                FileTypes = new FilePickerFileType(new Dictionary<DevicePlatform, IEnumerable<string>>
                {
                    { DevicePlatform.WinUI, [".xml", ".mefw", ".medef"] },
                    { DevicePlatform.macOS, [".xml", ".mefw", ".medef"] },
                })
            });

            if (result is not null)
            {
                await EcuDefinitionService.MergeDefinitionFileAsync(result.FullPath);
                _statusMessage = $"Successfully merged definitions from {result.FileName}. Please restart the application for all changes to take effect.";
            }
            else
            {
                _statusMessage = "Import cancelled.";
            }
        }
        catch (Exception ex)
        {
            _isError = true;
            _statusMessage = $"Error importing file: {ex.Message}";
        }
        finally
        {
            _isImporting = false;
            StateHasChanged();
        }
    }
}
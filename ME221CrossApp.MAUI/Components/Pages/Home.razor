@page "/"
@inject ConnectionState ConnectionState
@inject IDeviceCommunicator Communicator
@inject IEcuDefinitionService DefinitionService
@inject IEcuInteractionService EcuInteractionService
@inject IConfiguration Config
@inject IDeviceDiscoveryService SerialDiscovery
@inject TcpDeviceDiscoveryService TcpDiscovery

@implements IAsyncDisposable
@implements IDisposable

<PageTitle>Home</PageTitle>

@if (!ConnectionState.IsModeSelected)
{
    <div class="modal">
        <div class="modal-content">
            <h3>Select Connection Mode</h3>
            <p>Choose how to connect to the ECU.</p>
            <div class="mb-3">
                <h5>Serial Port</h5>
                <p>Connect to a real ECU via a serial port.</p>
                <div class="input-group">
                    <select class="form-select" @bind="_selectedSerialPort">
                        @foreach (var port in _serialPorts)
                        {
                            <option value="@port">@port</option>
                        }
                    </select>
                    <button class="btn btn-primary" @onclick="() => SelectModeAsync(ConnectionMode.Serial)" disabled="@_isConnecting">Connect</button>
                </div>
            </div>
            <div>
                <h5>Simulator</h5>
                <p>Connect to the ECU simulator over TCP.</p>
                <div class="input-group">
                    <select class="form-select" @bind="_selectedTcpPort">
                        @foreach (var port in _tcpPorts)
                        {
                            <option value="@port">@port</option>
                        }
                    </select>
                    <button class="btn btn-secondary" @onclick="() => SelectModeAsync(ConnectionMode.Tcp)" disabled="@_isConnecting">Connect</button>
                </div>
            </div>
        </div>
    </div>
}
else if (IsStreaming)
{
    <h3>Real-time Data</h3>
    <div class="data-grid-container">
        @foreach (var dp in _dataPoints)
        {
            <DataPointCard DataPoint="dp" />
        }
    </div>
}
else
{
    <h1>Welcome to the ME221 Control App</h1>
    <p>@_statusMessage</p>
}


@code {
    private bool _definitionsLoaded;
    private bool _isConnecting;
    private IReadOnlyList<string> _serialPorts = [];
    private IReadOnlyList<string> _tcpPorts = [];
    private string? _selectedSerialPort;
    private string? _selectedTcpPort;
    
    private IReadOnlyList<RealtimeDataPoint> _dataPoints = [];
    private CancellationTokenSource? _streamingCts;
    private string _statusMessage = "Connecting...";

    public bool IsStreaming => _dataPoints.Count > 0;

    protected override async Task OnInitializedAsync()
    {
        _definitionsLoaded = DefinitionService.GetDefinition()?.EcuObjects.Any() ?? false;
        
        _serialPorts = await SerialDiscovery.GetAvailablePortsAsync();
        _selectedSerialPort = _serialPorts.FirstOrDefault();

        _tcpPorts = await TcpDiscovery.GetAvailablePortsAsync();
        _selectedTcpPort = _tcpPorts.FirstOrDefault();

        ConnectionState.OnChangeAsync += HandleConnectionStateChanged;
        
        if (ConnectionState.IsModeSelected)
        {
            await HandleConnectionStateChanged();
        }
    }

    private async Task SelectModeAsync(ConnectionMode mode)
    {
        _isConnecting = true;
        StateHasChanged();
        
        var port = mode switch
        {
            ConnectionMode.Serial => _selectedSerialPort,
            ConnectionMode.Tcp => _selectedTcpPort,
            _ => null
        };

        if (string.IsNullOrEmpty(port))
        {
            _statusMessage = "Please select a valid port.";
            _isConnecting = false;
            return;
        }
        
        await ConnectionState.SetModeAsync(mode, port);
    }
    
    private async Task HandleConnectionStateChanged()
    {
        await InvokeAsync(async () =>
        {
            if (!_definitionsLoaded)
            {
                _statusMessage = "No ECU definitions loaded. Please import a definition file from the Settings page.";
                StateHasChanged();
                return;
            }

            if (ConnectionState.IsModeSelected && ConnectionState.SelectedPort is not null)
            {
                try
                {
                    if (!Communicator.IsConnected)
                    {
                        await Communicator.ConnectAsync(ConnectionState.SelectedPort, Config.GetValue<int>("BaudRate"));
                    }

                    _statusMessage = $"Connected via {ConnectionState.Mode} to {ConnectionState.SelectedPort}. Starting data stream...";
                    StateHasChanged();

                    await StartStreamingAsync();
                }
                catch (Exception ex)
                {
                    _statusMessage = $"Failed to connect: {ex.Message}";
                    StateHasChanged();
                }
            }
        });
    }

    private async Task StartStreamingAsync()
    {
        _streamingCts = new CancellationTokenSource();
        try
        {
            await foreach (var dataBatch in EcuInteractionService.StreamRealtimeDataAsync(_streamingCts.Token))
            {
                _dataPoints = dataBatch;
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (OperationCanceledException)
        {
            _statusMessage = "Data stream stopped.";
        }
        catch (Exception ex)
        {
            _statusMessage = $"An error occurred during streaming: {ex.Message}";
        }
        finally
        {
            _dataPoints = [];
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        ConnectionState.OnChangeAsync -= HandleConnectionStateChanged;
    }

    public async ValueTask DisposeAsync()
    {
        if (_streamingCts is not null)
        {
            await _streamingCts.CancelAsync();
            _streamingCts.Dispose();
        }
    }
}